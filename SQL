import tkinter as tk
from tkinter import messagebox
import sqlite3

class PadariaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de Padaria com SQLite")
        self.conectar_banco()
        self.criar_tabelas()

        
        self.frame_produtos = tk.Frame(self.root)
        self.frame_produtos.pack(pady=10)

        tk.Label(self.frame_produtos, text="Nome do Produto:").grid(row=0, column=0)
        self.nome_produto = tk.Entry(self.frame_produtos)
        self.nome_produto.grid(row=0, column=1)

        tk.Label(self.frame_produtos, text="Preço:").grid(row=1, column=0)
        self.preco_produto = tk.Entry(self.frame_produtos)
        self.preco_produto.grid(row=1, column=1)

        tk.Button(self.frame_produtos, text="Adicionar Produto", command=self.adicionar_produto).grid(row=2, columnspan=2, pady=10)

        
        self.frame_lista = tk.Frame(self.root)
        self.frame_lista.pack(pady=10)

        self.lista_produtos = tk.Listbox(self.frame_lista, width=50, height=10)
        self.lista_produtos.pack()
        self.atualizar_lista_produtos()

        
        self.frame_vendas = tk.Frame(self.root)
        self.frame_vendas.pack(pady=10)

        tk.Label(self.frame_vendas, text="Quantidade Vendida:").grid(row=0, column=0)
        self.quantidade_vendida = tk.Entry(self.frame_vendas)
        self.quantidade_vendida.grid(row=0, column=1)

        tk.Button(self.frame_vendas, text="Registrar Venda", command=self.registrar_venda).grid(row=1, columnspan=2, pady=10)

    def conectar_banco(self):
        self.conn = sqlite3.connect('padaria.db')
        self.cursor = self.conn.cursor()

    def criar_tabelas(self):
        
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS produtos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                preco REAL NOT NULL
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS vendas (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                produto_id INTEGER NOT NULL,
                quantidade INTEGER NOT NULL,
                FOREIGN KEY (produto_id) REFERENCES produtos(id)
            )
        ''')
        self.conn.commit()

    def adicionar_produto(self):
        nome = self.nome_produto.get()
        preco = self.preco_produto.get()
        if nome and preco:
            try:
                preco = float(preco)
                self.cursor.execute("INSERT INTO produtos (nome, preco) VALUES (?, ?)", (nome, preco))
                self.conn.commit()
                self.atualizar_lista_produtos()
                self.nome_produto.delete(0, tk.END)
                self.preco_produto.delete(0, tk.END)
            except ValueError:
                messagebox.showerror("Erro", "Preço deve ser um número válido.")
        else:
            messagebox.showerror("Erro", "Por favor, preencha todos os campos.")

    def atualizar_lista_produtos(self):
        self.lista_produtos.delete(0, tk.END)
        self.cursor.execute("SELECT nome, preco FROM produtos")
        produtos = self.cursor.fetchall()
        for produto in produtos:
            self.lista_produtos.insert(tk.END, f"{produto[0]} - R${produto[1]:.2f}")

    def registrar_venda(self):
        produto_selecionado = self.lista_produtos.curselection()
        if produto_selecionado:
            try:
                quantidade = int(self.quantidade_vendida.get())
                
                self.cursor.execute("SELECT id FROM produtos LIMIT 1 OFFSET ?", (produto_selecionado[0],))
                produto_id = self.cursor.fetchone()[0]
                
                self.cursor.execute("INSERT INTO vendas (produto_id, quantidade) VALUES (?, ?)", (produto_id, quantidade))
                self.conn.commit()
                messagebox.showinfo("Venda Registrada", f"Venda de {quantidade} unidades registrada.")
                self.quantidade_vendida.delete(0, tk.END)
            except ValueError:
                messagebox.showerror("Erro", "Quantidade deve ser um número inteiro.")
        else:
            messagebox.showerror("Erro", "Selecione um produto para registrar a venda.")

    def fechar_conexao(self):
        self.conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = PadariaApp(root)
    root.protocol("WM_DELETE_WINDOW", app.fechar_conexao)
    root.mainloop()
